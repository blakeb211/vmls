source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
source("~/wrk/competitive-cpp/convex-hull.r", echo=TRUE)
library(Matrix)
knitr::opts_chunk$set(echo = TRUE)
A = matrix(data=c(0,0,0,1,0,0,0,1,1),byrow=TRUE)
A
A = matrix(data=c(0,0,0,1,0,0,0,1,1),nrow=3, byrow=TRUE)
A
t(A) %*% A
Diagonal(c(1,1,1))
Diagonal(c(1,1,1),n=3)
```{r c2}
A = matrix(data=c(0,1,0,0,1,0,0,0,1),nrow=3, byrow=TRUE)
A
t(A) %*% A
rotmat(0.1)
rotmat = function(theta) {
matrix(data=c(cos(theta),-sin(theta), sin(theta),cos(theta)),nrow=2,byrow=TRUE)
}
rotmat(0.1)
rotmat(0.01)
library(MASS)
library(magrittr)
library(MASS)
library(magrittr)
rotmat = function(theta) {
res = matrix(data=c(cos(theta),-sin(theta),
sin(theta),cos(theta)),
nrow=2,byrow=TRUE) %>%
fractions
}
rotmat(0.01)
fractions(0.01)
rotmat(0.01)
rotmat = function(theta) {
res = matrix(data=c(cos(theta),-sin(theta),
sin(theta),cos(theta)),
nrow=2,byrow=TRUE) %>%
}
rotmat = function(theta) {
res = matrix(data=c(cos(theta),-sin(theta),
sin(theta),cos(theta)),
nrow=2,byrow=TRUE)
}
rotmat(0.01)
rotmat = function(theta) {
res = matrix(data=c(cos(theta),-sin(theta),
sin(theta),cos(theta)),
nrow=2,byrow=TRUE)
res %>% fractions
}
rotmat(0.01)
?fractions
res %>% fractions(.,max.denominator = 10_000)
res %>% fractions(.,max.denominator = 10`000)
rotmat = function(theta) {
res = matrix(data=c(cos(theta),-sin(theta),
sin(theta),cos(theta)),
nrow=2,byrow=TRUE)
res %>% fractions(.,max.denominator = 10000)}
rotmat(0.01)
rotmat = function(theta) {
res = matrix(data=c(cos(theta),-sin(theta),
sin(theta),cos(theta)),
nrow=2,byrow=TRUE)
res %>% fractions(.,max.denominator = 10000)}
rotmat(0.01)
rotmat = function(theta) {
res = matrix(data=c(cos(theta),-sin(theta),
sin(theta),cos(theta)),
nrow=2,byrow=TRUE)
res %>% fractions(.,max.denominator = 10000)
}
rotmat(0.01)
rotmat = function(theta) {
res = matrix(data=c(cos(theta),-sin(theta),
sin(theta),cos(theta)),
nrow=2,byrow=TRUE)
res %>% fractions(x,max.denominator = 10000)
}
rotmat(0.01)
rotmat = function(theta) {
res = matrix(data=c(cos(theta),-sin(theta),
sin(theta),cos(theta)),
nrow=2,byrow=TRUE)
res %>% fractions(max.denominator = 100)
}
rotmat(0.01)
rotmat = function(theta) {
res = matrix(data=c(cos(theta),-sin(theta),
sin(theta),cos(theta)),
nrow=2,byrow=TRUE)
res
}
rotmat(0.01)
res
rotmat = function(theta) {
res = matrix(data=c(cos(theta),-sin(theta),
sin(theta),cos(theta)),
nrow=2,byrow=TRUE)
res
}
rotmat(0.01)
rotmat = function(theta) {
res = matrix(data=c(cos(theta),-sin(theta),
sin(theta),cos(theta)),
nrow=2,byrow=TRUE)
res
}
rotmat(0.01)
rotmat = function(theta) {
res = matrix(
data = c(cos(theta), -sin(theta),
sin(theta), cos(theta)),
nrow = 2,
byrow = TRUE
)
res
}
rotmat(0.01)
library(MASS)
library(magrittr)
rotmat = function(theta) {
res = matrix(
data = c(cos(theta), -sin(theta),
sin(theta), cos(theta)),
nrow = 2,
byrow = TRUE
)
res
}
rotmat(0.01)
library(MASS)
library(magrittr)
rotmat = function(theta) {
res = matrix(
data = c(cos(theta), -sin(theta),
sin(theta), cos(theta)),
nrow = 2,
byrow = TRUE
)
res
}
rotmat(0.01)
library(MASS)
library(magrittr)
rotmat = function(theta) {
res = matrix(
data = c(cos(theta), -sin(theta),
sin(theta), cos(theta)),
nrow = 2,
byrow = TRUE
)
res %>% fractions(max.denominator = 10000)
}
rotmat(0.01)
library(MASS)
library(magrittr)
rotmat = function(theta) {
res = matrix(
data = c(cos(theta), -sin(theta),
sin(theta), cos(theta)),
nrow = 2,
byrow = TRUE
)
res %>% fractions(max.denominator = 10000)
}
rotmat(0.03)
library(MASS)
library(magrittr)
rotmat = function(theta) {
res = matrix(
data = c(cos(theta), -sin(theta),
sin(theta), cos(theta)),
nrow = 2,
byrow = TRUE
)
res
}
rotmat(0.01)
library(MASS)
library(magrittr)
rotmat = function(theta) {
res = matrix(
data = c(cos(theta), -sin(theta),
sin(theta), cos(theta)),
nrow = 2,
byrow = TRUE
)
res
}
rotmat(0.001)
library(MASS)
library(magrittr)
rotmat = function(theta) {
res = matrix(
data = c(cos(theta), -sin(theta),
sin(theta), cos(theta)),
nrow = 2,
byrow = TRUE
)
res
}
rotmat(0.01)
2/sqrt(5)
1/sqrt(5)
(-10 + sqrt(5))/sqrt(5)
Q
-(1/5) / sqrt(5)/5
-(1/5) / (sqrt(5)/5)
Q
knitr::opts_chunk$set(echo = TRUE)
library(pracma)
norm = function(X) { sqrt(sum(X * X)) }
A = matrix(c(2,-1,1,0),nrow=2,byrow=TRUE)
Q = gramSchmidt(A)$Q
R = gramSchmidt(A)$R
A
Q
R
# q1tilde = a1 - projection of a1 on q1
q1tilde = A[,1]
Q
t(Q) %*% A
R
(t(Q) %*% A) - R
( t(Q) %*% A ) - R
crossprod(A)
crossprod(R)
?angle
norm(A[,1])
norm(R[,1])
R
A
Q
A
R
norm{R[,1]}
norm{R[,1])
norm(R[,1])
norm(A[,1])
knitr::opts_chunk$set(echo = TRUE)
library(pracma)
norm = function(X) { sqrt(sum(X * X)) }
A = matrix(c(2,-1,1,0),nrow=2,byrow=TRUE)
Q = gramSchmidt(A)$Q
R = gramSchmidt(A)$R
A
Q
R
# q1 = normalized A1
q1tilde = A[,1]
q1 = q1tilde / norm(q1tilde)
q1
# q2tilde = a2 - projection of a2 on q1
q2tilde = A[,2] - c(crossprod(q1,A[,2]))*q1
q2 = q2tilde/norm(q2tilde)
q2
( t(Q) %*% A ) - R
crossprod(A)
crossprod(R)
randu(1)
randu()
?randu
randu()
randu
randu[1:12]
randu[1:12,]
randu[c(1)]
randu[c(1)][1:10]
randu[c(1)]
as.vector(randu)
as.vector(randu)[1:10]
sample(randu)
sample(randu,n=10)
sample(x = randu, size=10)
sample(x = randu)
sample(x = randu,size = 10)
length(randu)
as.vector(randu)
length(as.vector(randu))
as.matrix(randu)
as.matrix(randu)
library(magrittr)
A = matrix(randu)
dim(A)
A
as.matrix(randu) %>% dim
as.matrix(randu) %>% as.vector %>% length
as.matrix(randu) %>% as.vector %>% sample(size=10)
A = matrix(as.matrix(randu) %>% as.vector %>% sample(size=12),ncol=3)
A
QR(A)
qr(A)
det(A)
A
A = matrix(as.matrix(randu) %>% as.vector %>% sample(size=9),ncol=3)
A
library(pracma)
gramSchmidt(A)
getwd()
setwd("wrk/vmls/")
A
det(A)
kmeans(A,2)
?kmeans
C = matrix(c(1,0,0,1,1,0),ncol=2)
C
C = matrix(c(1,0,0,1,1,0),ncol=3)
C
z1 = c(0.281662, 0.7710205, 0.4477655)
z2 = strsplit("0.972510 0.2902690 0.2489080",' ')
z2
z2 = strsplit("0.972510 0.2902690 0.2489080",' ') %>% as.double()
z2 = strsplit("0.972510 0.2902690 0.2489080",' ') %>% double()
z2 = strsplit("0.972510 0.2902690 0.2489080",' ') %>% double(.)
z2 = strsplit("0.972510 0.2902690 0.2489080",split = ' ') %>% as.numeric()
z2 = strsplit("0.972510 0.2902690 0.2489080",split = ' ')
z2
z2 = strsplit("0.972510 0.2902690 0.2489080",split = ' ') %>% unlist %>% as.double
z23
z2
z1
Z = cbind(z1,z2) %>% as.matrix
Z
C
Z %*% C
A
Z
C
gramSchmidt(A)
norm(z1)
Q = gramSchmidt(A)
Q = gramSchmidt(A)$Q
Q
R = gramSchmidt(A)$R
Z
X
X = A
X
A
X
Q
R
Q %*% R
Q %*% R - X
Z
C
Z %*% C - X
C %*% Z
norm(Z %*% C - X,"F")
?norm
norm(Z %*% C - X,type=c("F"))
norm(Z %*% C - X,type="F")
norm(Z %*% C - X,"F")
norm(Z %*% C - X,type = "F")
norm(c(1,10))
norm(X)
norm(Z)
norm(Z %*% C - X)
norm(Z %*% C - X, "F")
??norm
base::norm(Z %*% C - X, "F")
Z %*% C
Q %*% R
Q %*% R - Z %*% C
Z
C
Z %*% C
knitr::opts_chunk$set(echo = TRUE)
flops = function(n) { 2*n^3 - n }
flops(1500)
flops(3000)
t_3000 = flops(n=1500) / t_1500 / flops(n=3000)
flops = function(n) { 2*n^3 - n }
flops(1500)
flops(3000)
t_1500 = 0.2
t_3000 = flops(n=1500) / t_1500 / flops(n=3000)
t_3000
5^3
flops = function(n) { n^3 }
t_1500 = 0.2
t_3000 = flops(n=1500) / t_1500 / flops(n=3000)
t_3000
flops = function(n) { 2*n^3 - n }
t_1500 = 0.2
t_3000 = t_1500 * flops(n=3000) / flops(n=1500)
t_3000
